#!/bin/bash

# Bash wrapper that adds nsm-proxy / LADISH level 1 compatibility to gvim.
#
# Bash's trap and wait are used together with gvim's server functionality.
# gvim server is started as background process. wait keeps this script "alive"
# as long as the process is running. trap handles incoming signals which are
# translated into gvim remote commands.

# Automatically create gvim server name from NSM client id. Use first given
# parameter as text file name. If it is not available, use NSM client id too.
SERVER_NAME="${NSM_CLIENT_ID:-NON}"
FILE_NAME="${1:-${NSM_CLIENT_ID:-notes}.txt}"

start_up() {
    # Create a new gvim server which we can control via --remote-send.
    # Use -f to start gvim in foreground (not forked and detached).
    gvim -f --servername "${SERVER_NAME}" --remote-silent "${FILE_NAME}" &
}

# Sending SIGUSR1 or SIGUSR2 to this script will trigger a gvim write.
save() {
    # Send write command to gvim server.
    gvim --servername "${SERVER_NAME}" --remote-send '<C-\><C-N>:w<CR>'
    # Enter wait "loop" again to wait for parallel executing gvim.
    wait
}
trap save SIGUSR1 SIGUSR2

# Handle SIGTERM/SIGINT gracefully and stop started processes.
clean_up() {
    # Send quit command to gvim server.
    gvim --servername "${SERVER_NAME}" --remote-send '<C-\><C-N>:q!<CR>'
    exit
}
trap clean_up SIGTERM SIGINT

start_up
# Enter wait "loop" to wait for parallel executing gvim.
wait
